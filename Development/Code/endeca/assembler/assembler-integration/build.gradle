ext {
    slf4jVersion = '1.6.2'
    jodaTimeVersion = '2.3'
    jodaMoneyVersion = '0.10.0'
    commonsearchVersion = '1.2.SNAPSHOT'
    junitVersion = '4.8.2'
    springVersion = '3.0.4.RELEASE'
}

allprojects {
    apply plugin: 'jacoco'

    jacoco.toolVersion = '0.7.4.201502262128'

    repositories {
        flatDir {
            dirs "$rootProject.projectDir/lib/include"
        }
        repositories {
            maven {
                url "${artifactoryUrl}/default"
            }
        }
    }
}

configure(subprojects) {
    apply plugin: 'java'

    sourceCompatibility = 1.7
    archivesBaseName = "${rootProject.name}-${project.name}"

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

    test {
        useJUnit()
        include 'com/endeca/**/*Test.class'
    }

    tasks.withType(Jar) {
        version = "${majorVersion}.${minorVersion}.${patchVersion}"
        manifest {
            attributes(
                    "Specification-Title": "$project.name",
                    "Specification-Version": "${majorVersion}.${minorVersion}",
                    "Specification-Vendor": "$vendor",
                    "Implementation-Title": "$project.name",
                    "Implementation-Version": "$version",
                    "Implementation-Vendor": "$vendor",
                    "Implementation-Vendor-Id": "$group"
            )
        }
    }

    configurations {
        all*.exclude group: 'commons-logging'
    }

    dependencies {
        compile "org.slf4j:slf4j-api:$slf4jVersion",
                'com.google.code.findbugs:annotations:3.0.0'
        runtime "org.slf4j:jcl-over-slf4j:$slf4jVersion"
        testCompile("junit:junit:$junitVersion") {
            exclude group: "hamcrest-core"
        }
        testCompile('com.tngtech.java:junit-dataprovider:1.9.3') {
            exclude group: 'junit', module: 'junit-dep'
        }
        testCompile "org.hamcrest:hamcrest-all:1.3",
                "org.mockito:mockito-all:1.8.5"
        testRuntime "org.slf4j:slf4j-simple:$slf4jVersion"
    }

}

task jacocoTestReport(type: JacocoReport) {
    dependsOn subprojects.test
    executionData subprojects.collect { project ->
        new File(project.buildDir, "jacoco/test.exec")
    }.findAll { it.exists() }
    sourceDirectories = files(subprojects.collect { project ->
        project.sourceSets.main.java.srcDirs
    })
    classDirectories = files(subprojects.collect { project ->
        project.sourceSets.main.output.classesDir
    })
    reports {
        xml.enabled = false
        csv.enabled = false
        html.enabled = true
    }
}

task clean(type: Delete) {
    dependsOn subprojects.clean
    delete('build')
}

task check {
    dependsOn subprojects.check, jacocoTestReport
}

task build {
    dependsOn subprojects.build, check
}
